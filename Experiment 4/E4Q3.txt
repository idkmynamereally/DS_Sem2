#include <stdio.h>
#include <stdlib.h>

//INFIX TO POSTFIX
//OPERATORS BY PRECEDENCE *,/ || +,-

struct node{
    char operatoor;
    int priority;
    struct node * next;
};

struct node * top;
struct node * new_node;

int return_priority(char operater);

int main()
{
    char infix[50];
    printf("Enter Infix Input : ");
    scanf("%s",infix);

    char element = infix[0];
    for(int i = 0; infix[i]!= '\0'; i++,element = infix[i]){
        //printf("\nChar PRIORITY = %d\n",return_priority(element));
        if (return_priority(element) == 0){
            printf("%c ",element);
            continue;
        }
        if (element == '('){
            push_to_top(element);
            continue;
        }
        if (element == ')'){
            while(top->operatoor != '('){
                printf("%c ",top->operatoor);
                pop_from_top();
            }
            pop_from_top();
            continue;
        }
            check_again:
        if (top == NULL){
            push_to_top(element);
            continue;
        }
        if (return_priority(element) > top->priority){
            push_to_top(element);
            continue;
        }
        else{
            printf("%c ",top->operatoor);
            pop_from_top();
            goto check_again;
        }
    }
    while(top!=NULL){
        printf("%c ",top->operatoor);
        pop_from_top();
    }

return 0;
}


void push_to_top(char operater){
    new_node = (struct node *)malloc(sizeof(struct node));
    new_node->operatoor = operater;
    new_node->priority = return_priority(operater);
    if (top == NULL){
        new_node->next = NULL;
        top = new_node;
        return;
    }
    new_node->next = top;
    top = new_node;
}

struct node node_at_top(){
    return *top;
};

void pop_from_top(){
    struct node * temp = top;
    top = top->next;
    free(temp);
};

int return_priority(char operater){
    if(operater == '+' || operater == '-'){
        return 1;
    }
    else if(operater == '*' || operater == '/'){
        return 2;
    }
    else if(operater == '(' || operater == ')'){
        return -1;
    }
    return 0;
}
