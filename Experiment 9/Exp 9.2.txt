#include <stdio.h>
#include <stdlib.h>

//CREATE BINARY SEARCH TREE

struct node {
    int data;
    struct node * r_child;
    struct node * l_child;
};

struct node * root;
struct node * ptr;
struct node * new_node;

int main()
{
    int choice;
    while (1){
        printf("1 - Enter New Node\n2 - Print PreOrder Traversal\n3 - Print InOrder Traversal\n4 - Print PostOrder Traversal\n5 - Quit\nChoice : ");
        scanf("%d",&choice);
        switch(choice){
            case 1 : insert_new_node();break;
            case 2 : preorder_traversal(root);break;
            case 3 : inorder_traversal(root);break;
            case 4 : postorder_traversal(root);break;
            case 5 : exit(0);
        }
    printf("\n");
    }
    return 0;
}

void insert_new_node(){
    new_node = (struct node *)malloc(sizeof(struct node));
    printf("Enter A Value For the New Node to be Inserted : ");
    scanf("%d",&new_node->data);
    new_node->l_child = NULL;
    new_node->r_child = NULL;
    if (root == NULL){
        root = new_node;
        return;
    }
    ptr = root;
    while (1){
        if (new_node->data < ptr->data || new_node->data == ptr->data){
            if (ptr->l_child == NULL){
                ptr->l_child = new_node;
                break;
            }
            ptr = ptr->l_child;
            continue;
        }
        if (new_node->data > ptr->data){
            if (ptr->r_child == NULL){
                ptr->r_child = new_node;
                break;
            }
            ptr = ptr->r_child;
            continue;
        }
    }
}

void print_tree(struct node * root){
    if (root == NULL){
        return;
    }
    printf("%d",root->data);
    if (root->l_child!=NULL)
        printf(" %d",root->l_child->data);
    if (root->r_child!=NULL)
        printf(" %d",root->r_child->data);
    printf("\n");
    if (root->l_child!=NULL)
        print_tree(root->l_child);
    if (root->r_child!=NULL)
        print_tree(root->r_child);
}

void inorder_traversal(struct node * parent){       //PERFECTIONE
    if (parent->l_child != NULL)
        inorder_traversal(parent->l_child);
    printf("| %d | ",parent->data);
    if (parent->r_child!=NULL){
        inorder_traversal(parent->r_child);
    }
}

void preorder_traversal(struct node * parent){
    if (parent == NULL)
        return;
    printf("| %d | ",parent->data);
    preorder_traversal(parent->l_child);
    preorder_traversal(parent->r_child);
}

void postorder_traversal(struct node * parent){
    if (parent == NULL)
        return;
    postorder_traversal(parent->l_child);
    postorder_traversal(parent->r_child);
    printf("| %d | ",parent->data);
}
